<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (1 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Icicle Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>node`node::ExecuteBootstrapper(node::Environment*, char const*, std::__1::vector&lt;v8::Local&lt;v8::String&gt;, std::__1::allocator&lt;v8::Local&lt;v8::String&gt; &gt; &gt;*, std::__1::vector&lt;v8::Local&lt;v8::Value&gt;, std::__1::allocator&lt;v8::Local (591 samples, 100.00%)</title><rect x="10.0" y="164" width="1180.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="13.00" y="174.5" >node`node::ExecuteBootstrapper(node::Environment*, char const*, std::__1::vector&lt;v8::Local&lt;v8::String&gt;, std::__1::allocator&lt;v8::Local&lt;v8::String&gt; &gt; &gt;*, std::__1::ve..</text>
</g>
<g >
<title>node`node::NodeMainInstance::Run (591 samples, 100.00%)</title><rect x="10.0" y="84" width="1180.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="13.00" y="94.5" >node`node::NodeMainInstance::Run</text>
</g>
<g >
<title>node`EVP_DigestUpdate (2 samples, 0.34%)</title><rect x="24.0" y="516" width="4.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="26.98" y="526.5" ></text>
</g>
<g >
<title>node`EVP_MD_CTX_reset (1 samples, 0.17%)</title><rect x="1142.1" y="532" width="2.0" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="1145.08" y="542.5" ></text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="276" width="1180.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="13.00" y="286.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="308" width="1180.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="13.00" y="318.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`ENGINE_finish (2 samples, 0.34%)</title><rect x="1112.1" y="548" width="4.0" height="15.0" fill="rgb(108,219,219)" rx="2" ry="2" />
<text  x="1115.13" y="558.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.34%)</title><rect x="141.8" y="532" width="4.0" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="144.78" y="542.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (6 samples, 1.02%)</title><rect x="41.9" y="532" width="12.0" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="44.95" y="542.5" ></text>
</g>
<g >
<title>node`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::HeapObject&gt;, v8::internal::Handle&lt;v8::internal::FunctionTemplateInfo&gt;, v8::internal::Handle (591 samples, 100.00%)</title><rect x="10.0" y="420" width="1180.0" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="13.00" y="430.5" >node`v8::internal::MaybeHandle&lt;v8::internal::Object&gt; v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt;(v8::internal::Isolate*, v8::internal::Handle&lt;v8..</text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="324" width="1180.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="13.00" y="334.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`Builtins_JSEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="244" width="1180.0" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="13.00" y="254.5" >node`Builtins_JSEntryTrampoline</text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="372" width="1180.0" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="13.00" y="382.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`SHA512_Update (2 samples, 0.34%)</title><rect x="1176.0" y="532" width="4.0" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="1179.02" y="542.5" ></text>
</g>
<g >
<title>node`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (591 samples, 100.00%)</title><rect x="10.0" y="388" width="1180.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="13.00" y="398.5" >node`Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit</text>
</g>
<g >
<title>node`v8::internal::FunctionCallbackArguments::Call (591 samples, 100.00%)</title><rect x="10.0" y="436" width="1180.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="13.00" y="446.5" >node`v8::internal::FunctionCallbackArguments::Call</text>
</g>
<g >
<title>node`DYLD-STUB$$bzero (1 samples, 0.17%)</title><rect x="173.7" y="548" width="2.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="176.72" y="558.5" ></text>
</g>
<g >
<title>node`EVP_PKEY_CTX_free (2 samples, 0.34%)</title><rect x="1126.1" y="548" width="4.0" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="1129.11" y="558.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memset (13 samples, 2.20%)</title><rect x="147.8" y="548" width="25.9" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="150.77" y="558.5" >l..</text>
</g>
<g >
<title>node`sha512_block_data_order (446 samples, 75.47%)</title><rect x="211.7" y="564" width="890.4" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="214.66" y="574.5" >node`sha512_block_data_order</text>
</g>
<g >
<title>node`OPENSSL_cleanse (16 samples, 2.71%)</title><rect x="1144.1" y="532" width="31.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="1147.08" y="542.5" >no..</text>
</g>
<g >
<title>node`SHA512_Update (5 samples, 0.85%)</title><rect x="1180.0" y="516" width="10.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="1183.02" y="526.5" ></text>
</g>
<g >
<title>node`EVP_MD_CTX_copy_ex (18 samples, 3.05%)</title><rect x="1104.1" y="532" width="36.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="1107.15" y="542.5" >nod..</text>
</g>
<g >
<title>node`node::Start (591 samples, 100.00%)</title><rect x="10.0" y="68" width="1180.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="13.00" y="78.5" >node`node::Start</text>
</g>
<g >
<title>node`node::StartExecution (591 samples, 100.00%)</title><rect x="10.0" y="148" width="1180.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="13.00" y="158.5" >node`node::StartExecution</text>
</g>
<g >
<title>node`OPENSSL_cleanse (13 samples, 2.20%)</title><rect x="99.8" y="548" width="26.0" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="102.85" y="558.5" >n..</text>
</g>
<g >
<title>node`node::StartExecution(node::Environment*, std::__1::function&lt;v8::MaybeLocal&lt;v8::Value&gt;  (591 samples, 100.00%)</title><rect x="10.0" y="132" width="1180.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="13.00" y="142.5" >node`node::StartExecution(node::Environment*, std::__1::function&lt;v8::MaybeLocal&lt;v8::Value&gt; </text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.51%)</title><rect x="14.0" y="516" width="6.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="16.99" y="526.5" ></text>
</g>
<g >
<title>node`EVP_DigestFinal_ex (1 samples, 0.17%)</title><rect x="22.0" y="516" width="2.0" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="24.98" y="526.5" ></text>
</g>
<g >
<title>node`node::LoadEnvironment(node::Environment*, std::__1::function&lt;v8::MaybeLocal&lt;v8::Value&gt;  (591 samples, 100.00%)</title><rect x="10.0" y="116" width="1180.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="13.00" y="126.5" >node`node::LoadEnvironment(node::Environment*, std::__1::function&lt;v8::MaybeLocal&lt;v8::Value&gt; </text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="356" width="1180.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="13.00" y="366.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`HMAC_Final (1 samples, 0.17%)</title><rect x="10.0" y="500" width="2.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="13.00" y="510.5" ></text>
</g>
<g >
<title>node`EVP_MD_CTX_copy_ex (36 samples, 6.09%)</title><rect x="53.9" y="532" width="71.9" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="56.93" y="542.5" >node`EVP..</text>
</g>
<g >
<title>node`Builtins_JSEntry (591 samples, 100.00%)</title><rect x="10.0" y="228" width="1180.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="13.00" y="238.5" >node`Builtins_JSEntry</text>
</g>
<g >
<title>node`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal:: (591 samples, 100.00%)</title><rect x="10.0" y="212" width="1180.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="13.00" y="222.5" >node`v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::</text>
</g>
<g >
<title>node`node::crypto::PBKDF2Traits::DeriveBits (591 samples, 100.00%)</title><rect x="10.0" y="484" width="1180.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="13.00" y="494.5" >node`node::crypto::PBKDF2Traits::DeriveBits</text>
</g>
<g >
<title>node`sha512_block_data_order (1 samples, 0.17%)</title><rect x="1102.1" y="548" width="2.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="1105.15" y="558.5" ></text>
</g>
<g >
<title>node`PKCS5_PBKDF2_HMAC (590 samples, 99.83%)</title><rect x="12.0" y="500" width="1178.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="15.00" y="510.5" >node`PKCS5_PBKDF2_HMAC</text>
</g>
<g >
<title>node`EVP_MD_CTX_reset (4 samples, 0.68%)</title><rect x="1116.1" y="548" width="8.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="1119.13" y="558.5" ></text>
</g>
<g >
<title>dyld`start (591 samples, 100.00%)</title><rect x="10.0" y="52" width="1180.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="62.5" >dyld`start</text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="292" width="1180.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="302.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`EVP_MD_CTX_md_data (1 samples, 0.17%)</title><rect x="175.7" y="548" width="2.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="178.72" y="558.5" ></text>
</g>
<g >
<title>all (591 samples, 100%)</title><rect x="10.0" y="36" width="1180.0" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="13.00" y="46.5" ></text>
</g>
<g >
<title>node`EVP_MD_CTX_reset (5 samples, 0.85%)</title><rect x="81.9" y="548" width="10.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="84.88" y="558.5" ></text>
</g>
<g >
<title>node`DYLD-STUB$$memcpy (1 samples, 0.17%)</title><rect x="20.0" y="516" width="2.0" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="22.98" y="526.5" ></text>
</g>
<g >
<title>node`EVP_MD_CTX_md_data (1 samples, 0.17%)</title><rect x="1140.1" y="532" width="2.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="1143.08" y="542.5" ></text>
</g>
<g >
<title>node`node::NodeMainInstance::Run (591 samples, 100.00%)</title><rect x="10.0" y="100" width="1180.0" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="13.00" y="110.5" >node`node::NodeMainInstance::Run</text>
</g>
<g >
<title>node`HMAC_CTX_copy (48 samples, 8.12%)</title><rect x="38.0" y="516" width="95.8" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="40.95" y="526.5" >node`HMAC_C..</text>
</g>
<g >
<title>node`node::crypto::CryptoJob&lt;node::crypto::PBKDF2Traits&gt;::Run(v8::FunctionCallbackInfo (591 samples, 100.00%)</title><rect x="10.0" y="452" width="1180.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="13.00" y="462.5" >node`node::crypto::CryptoJob&lt;node::crypto::PBKDF2Traits&gt;::Run(v8::FunctionCallbackInfo</text>
</g>
<g >
<title>node`EVP_MD_CTX_test_flags (1 samples, 0.17%)</title><rect x="1124.1" y="548" width="2.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="1127.11" y="558.5" ></text>
</g>
<g >
<title>node`non-virtual thunk to node::crypto::DeriveBitsJob&lt;node::crypto::PBKDF2Traits&gt;::DoThreadPoolWork (591 samples, 100.00%)</title><rect x="10.0" y="468" width="1180.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="13.00" y="478.5" >node`non-virtual thunk to node::crypto::DeriveBitsJob&lt;node::crypto::PBKDF2Traits&gt;::DoThreadPoolWork</text>
</g>
<g >
<title>node`v8::internal::Builtin_HandleApiCall (591 samples, 100.00%)</title><rect x="10.0" y="404" width="1180.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="13.00" y="414.5" >node`v8::internal::Builtin_HandleApiCall</text>
</g>
<g >
<title>node`SHA512_Final (463 samples, 78.34%)</title><rect x="177.7" y="548" width="924.4" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="180.72" y="558.5" >node`SHA512_Final</text>
</g>
<g >
<title>node`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local (591 samples, 100.00%)</title><rect x="10.0" y="180" width="1180.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="13.00" y="190.5" >node`v8::Function::Call(v8::Local&lt;v8::Context&gt;, v8::Local&lt;v8::Value&gt;, int, v8::Local</text>
</g>
<g >
<title>node`OPENSSL_cleanse (5 samples, 0.85%)</title><rect x="1130.1" y="548" width="10.0" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="1133.10" y="558.5" ></text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="340" width="1180.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="13.00" y="350.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`EVP_MD_CTX_copy_ex (5 samples, 0.85%)</title><rect x="28.0" y="516" width="10.0" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="30.97" y="526.5" ></text>
</g>
<g >
<title>node`Builtins_InterpreterEntryTrampoline (591 samples, 100.00%)</title><rect x="10.0" y="260" width="1180.0" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="13.00" y="270.5" >node`Builtins_InterpreterEntryTrampoline</text>
</g>
<g >
<title>node`HMAC_Final (524 samples, 88.66%)</title><rect x="133.8" y="516" width="1046.2" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="136.79" y="526.5" >node`HMAC_Final</text>
</g>
<g >
<title>node`EVP_MD_CTX_reset (4 samples, 0.68%)</title><rect x="125.8" y="532" width="8.0" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="128.80" y="542.5" ></text>
</g>
<g >
<title>node`ENGINE_finish (2 samples, 0.34%)</title><rect x="77.9" y="548" width="4.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="80.88" y="558.5" ></text>
</g>
<g >
<title>node`EVP_DigestFinal_ex (480 samples, 81.22%)</title><rect x="145.8" y="532" width="958.3" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="148.77" y="542.5" >node`EVP_DigestFinal_ex</text>
</g>
<g >
<title>node`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal::Handle (591 samples, 100.00%)</title><rect x="10.0" y="196" width="1180.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="13.00" y="206.5" >node`v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle&lt;v8::internal::Object&gt;, v8::internal::Handle&lt;v8::internal::Object&gt;, int, v8::internal..</text>
</g>
<g >
<title>node`EVP_MD_CTX_test_flags (4 samples, 0.68%)</title><rect x="91.9" y="548" width="7.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="94.86" y="558.5" ></text>
</g>
</g>
</svg>
